
	if (!qvalue)
	{
		if (env_quota)
			qvalue = env_quota;
		else
			qvalue = def_quota;
	}

	/* Determining paths */

	if (argv[optind])  // Determining the subvolume
		subv_path = argv[optind];  // Command line or
	else if (env_subvol)
		subv_path = env_subvol;  // Environment or
	else
		subv_path = def_subvol;  // Hardcoded

	if (check_if_subvol(subv_path))  // Quit on wrong subvolume selection
	{
		fprintf(stderr, "Selection is not a Btrfs subvolume: %s\n",
				subv_path);
		return 1;
	}

	strcpy(store_path, subv_path);  // Main store: _subvolume_/.snapshots
	strcat(store_path, STORE);

	strcpy(pool_path, store_path);  // Allow multiple stores inside Main store
	if (pvalue)
		strcat(pool_path, pvalue);
	else if (env_pool)
		strcat(pool_path, env_pool);
	else
		strcat(pool_path, def_pool);
	strcat(pool_path, "/");  // Add a final '/'
	//printf("%s\n", pool_path);


	update_ts();

	if (update_snap_path())
		return 1;
	get_snapshots();
	sort_snapshots();

	//printf("cflag = %d, lflag = %d, qvalue = %s, dvalue = %s, svalue = %s, subv_path = %s, pool_path = %s\n", cflag, lflag, qvalue, dvalue, svalue, subv_path, pool_path);


	// TESTING

	if (loadconfig())
	{
		printconfig();
		writeconfig();
		execconfig();
	}
	else
	{
		puts ("Failed to read config");
		return 1;
	}
	return 0;
	// END TESTING

	if (svalue)  // Daemonizing
	{
		int period;
		if ((period = timetosecs(svalue)))
			printf("Daemonize! every %s (%d seconds)\n", svalue, period);
		else
			return 1;

		for (;;)
		{
			update_ts();
			if (update_snap_path())
				return 1;
			create_snapshot(qvalue);
			get_snapshots();
			sort_snapshots();
			sleep(period);
		}
	}
	else
	{
		if (dvalue)
		{
			if (is_integer(dvalue))
				index = atoi(dvalue);
			else
			{
				fprintf(stderr, "The selected snapshot does not exist.\n");
				return 1;
			}
			if (delete_snapshot(index))
				return 1;
		return 0;
		}


		if (lflag)
			list_snapshots();
		else if (cflag)
		{
			if(clean_all_snapshots())
				return 1;
		}
		else
			create_snapshot(qvalue);

		/*
		for (int index = optind; index < argc; index++)
			printf("Non-option argument: %s\n", argv[index]);
		return 0;
		*/
	}
